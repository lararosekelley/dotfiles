# gitconfig
#
# defines aliases and settings for git
# --------

[alias]
  # the most important alias
  fuckit = push -f --no-verify

  # b for branch
  b = branch

  # d for diff
  d = diff

  # deleting multiple branches
  dm = "!f() { git branch | grep \"$1\" | xargs -r git branch -D; }; f"

  # s for status
  s = status

  # cp for cherry-pick
  cp = cherry-pick

  # co for checkout
  co = checkout

  # create new branch and checkout
  cob = checkout -b

  # undo last commit
  undo = reset --soft HEAD~

  # fancier logging
  l = log --oneline --decorate --graph --date=relative --pretty=format:'%C(red)%h%Creset (%C(yellow)%ae %Cgreen%cd%C(reset)) - %s'

  # get current commit hash
  current = rev-parse HEAD

  # stash all
  sa = stash save --include-untracked

  # list all user-defined aliases
  la = config --get-regexp '^alias.'

  # compare current commit to previous
  prev = diff @~..@

  # sort contributors by number of commits
  rank = shortlog -sn --no-merges

  # search for text in a git repo
  grep = grep -Ii

  # show origin URL
  url = config --get remote.origin.url

  # most recent branches
  recent = for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # list stale remote branches, optionally excluding an additional pattern
  list-stale = "!f() { git branch -r --merged | egrep -v \"(^\\*|${1:-$(git head)})\" | sed 's/origin\\///'; }; f"

  # download and apply a patch from a github PR (github only)
  # usage: git apply-pr repo pr
  apply-pr = "!f() { curl -v -H \"Authorization: token ${GITHUB_TOKEN}\" -H 'Accept: application/vnd.github.v3.patch' -SL \"https://api.github.com/repos/${1}/pulls/${2}\" | git apply --check; }; f"

  # checkout from a PR on a fork of repostiory (github only)
  co-pr = "!f() { git fetch origin \"pull/$1/head:pr/$1\" && git checkout \"pr/$1\"; }; f"

  # get default branch (aka origin/HEAD)
  head = "!f() { git symbolic-ref --short refs/remotes/origin/HEAD | sed 's@^origin/@@'; }; f"

  # checkout default remote branch; depends on 'head' alias above
  cod = "!f() { git checkout \"$(git head)\"; }; f"

  # amend last commit with small changes
  amend = "!f() { git add -A && git commit --amend; }; f"

  # fixup commit by SHA
  fixup = "!f() { git add -A && git commit --fixup \"$(git rev-parse $1)\"; }; f"

  # generate project-specific .gitignore
  ignore = "!f() { curl -L -s https://www.toptal.com/developers/gitignore/api/$@ ;}; f"

  # grab .github folder from tylucaskelley/github-templates and fill in repo info
  tpl = "!f() { bash -c \"$(curl -s https://raw.githubusercontent.com/tylucaskelley/github-templates/master/install.sh)\"; }; f"

  # update base branch and switch back to previous branch
  up = "!git checkout \"${1:-$(git head)}\" && git fetch --prune origin && git rebase \"origin/${1:-$(git head)}\" && git checkout \"-\""

  # add all files to stage and commit changes w/ message
  ca = "!f() { [ ! -z \"$1\" ] && git add -A && git commit -m \"$1\"; }; f"

  # interactive rebase on a branch, defaults to default branch
  rb = "!f() { git rebase --interactive --autosquash \"${1:-$(git head)}\"; }; f"

  # list branches sorted by edit date
  lb = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"

  # change origin URL
  set-url = "!f() { git remote set-url origin \"$1\"; }; f"

  # purge file from histoy
  purge = "!f() { [ ! -z \"$1\" ] && git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch \"$1\"' --prune-empty --tag-name-filter cat -- --all; }; f"

  # set upstream of <branch> to origin/<branch>
  su = "!f() { git branch --set-upstream-to=origin/\"$1\" \"$1\"; }; f"
[color]
  # use colors in git commands
  ui = auto
[color "branch"]
  plain = white
  current = yellow bold reverse
  local = yellow
  remote = green
  upstream = cyan
[color "diff"]
  plain = white
  meta = yellow
  frag = magenta bold
  commit = yellow bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22
[color "status"]
  header = white
  branch = white bold
  added = yellow bold
  changed = green bold
  untracked = cyan bold reverse
  nobranch = red bold
[core]
  # custom .gitignore and .gitattributes
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # don't ignore case due to case-sensitive imports in some projects
  ignorecase = false

  # catch trailing whitespace & spaces before tabs
  whitespace = space-before-tab,trailing-space

  # make git rebase safer on macos
  trustctime = false

  # handle line endings properly
  autocrlf = input

  # use the diff-so-fancy tool
  pager = diff-so-fancy | less --tabs=4 -RFX
[diff]
  # detect copies and renames
  renames = copies
  mnemonicprefix = true
  submodule = diff
[fetch]
  prune = true
[help]
  # fix & execute misspelled commands
  autocorrect = 30
[init]
  defaultBranch = main
[push]
  # use new git push behavior
  default = simple
[pull]
  # default pull behavior
  rebase = true
[user]
  name = Lara Kelley
  email = lararosekelley@gmail.com
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[diff "lfs"]
  textconv = cat
