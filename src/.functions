#!/usr/bin/env bash
# shellcheck disable=SC1117

# functions
#
# useful utility functions
# --------

# Run something n times
#
# Params:
#     n - Number of iterations
#     args - Command and arguments to loop
#
# Usage: loop n args
function loop() {
  for (( n=0; n<$1; n++ ))
    do ${*:2}
  done
}

# Converts a video file to mp4
#
# Params:
#     infile - input file
#
# Usage: vid2mp4 input
#
function vid2mp4() {
  usage="usage: vid2mp4 input"

  if [ -z "$1" ]; then
    echo "$usage"
    return 1
  elif command -v ffmpeg &> /dev/null; then
    filename="$(echo "$1" | cut -d . -f 1)"

    ffmpeg -i "$1" -c:v libx264 -crf 23 -c:a aac -q:a 100 "$filename.mp4"

    echo "$1 converted and saved to $2"
  else
    echo "fatal: ffmpeg is not installed"
  fi
}

# Converts Quicktime screen recording to a gif
#
# Params:
#     infile - input file (.mov)
#     outfile - output filename (.gif)
#
# Usage: mov2gif infile outfile
#
function mov2gif() {
  usage="usage: mov2gif input.mov output.gif"

  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "$usage"
    return 1
  elif command -v ffmpeg &> /dev/null && command -v gifsicle &> /dev/null; then
    infile="$1"
    outfile="$2"

    if [ -f "$infile" ]; then
      ffmpeg -hide_banner -loglevel quiet -i "$infile" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$outfile"

      echo "${infile} converted and saved to ${outfile}"
    else
      echo "fatal: ${infile} is not a file"
      return 1
    fi
  else
    echo "fatal: ffmpeg and gifsicle are not installed"
    return 1
  fi
}

# Create a good tmux setup or attach to an existing one
#
# Params:
#   name - session name (defaults to "work")
#
# Usage: mux [name]
#
function mux() {
  if [[ -z "$1" ]]; then
    TMUX_SESSION="work"
  else
    TMUX_SESSION="$1"
  fi

  tmux start-server

  if ! tmux has-session -t "$TMUX_SESSION" &> /dev/null; then
    # first window has 3 panes
    tmux new-session -s "$TMUX_SESSION" -n "main" -d
    tmux split-window -h -t "$TMUX_SESSION:0"
    tmux split-window -v -t "$TMUX_SESSION:0"

    # set up vim in full screen window
    tmux new-window -t "$TMUX_SESSION:1" -n "editor 1"
    tmux send-keys -t "$TMUX_SESSION:1" vim C-m

    # second vim window
    tmux new-window -t "$TMUX_SESSION:2" -n "editor 2"
    tmux send-keys -t "$TMUX_SESSION:2" vim C-m

    # set up 4 equal panes, useful for watching logs
    tmux new-window -t "$TMUX_SESSION:3" -n "misc"
    tmux split-window -h -t "$TMUX_SESSION:3"
    tmux split-window -v -t "$TMUX_SESSION:3.0"
    tmux split-window -v -t "$TMUX_SESSION:3.2"
  fi

  # attach to first pane of first window
  tmux attach-session -t "$TMUX_SESSION:0.0"
}

# Starts a Python server, with optional port argument
#
# Params:
#     port - Optional port to serve at (defaults to 8080)
#
# Usage: server [port]
#
function serve() {
  python -m http.server "${1:-8080}"
}

# Installs peer dependencies for JavaScript projects, using Yarn
#
# Params:
#     package - package name
#
# Usage: peerdeps package
function peerdeps() {
  local PKG="$1"
  npm info "$PKG@latest" peerDependencies --json | command sed 's/[\{\},]//g ; s/: /@/g' | xargs yarn add --dev "$PKG@latest"
}
